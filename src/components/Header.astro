---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import { languages } from '../i18n/ui';
interface Props {
	routes: any[];
}

let { routes } = Astro.props;
const currentLocale = getLangFromUrl(Astro.url);
const t = useTranslations(currentLocale);
---
<header class="header" id="portfolio-header">
  {
    routes.map((route) => (
      <a class="link" href={t(route).link}>{t(route).title}</a>
    ))
  }
  <div>
    {
      languages.filter((lang) => lang.code !== currentLocale).map((lang) => (
        <a class="link language" href={lang.link}>
          {lang.code}
          <img class="flag" src={lang.icon} alt="flag"/>
        </a>
      ))
    }
  </div>
  <button id="burger-menu-button" name="burger-menu-button" ><img class="icon" src='menu.svg' alt="burger icon"></button>
</header>
<section id="sidebar">
  {
    routes.map((route) => (
      <a class="mobile-link" href={t(route).link}>{t(route).title}</a>
    ))
  }
  <div>
    {
      languages.filter((lang) => lang.code !== currentLocale).map((lang) => (
        <a class="mobile-link language" href={lang.link}>
          {lang.code}
          <img class="flag" src={lang.icon} alt="flag"/>
        </a>
      ))
    }
  </div>
</section>
<style>
  .header {
    position: sticky;
    top: 0px;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    column-gap: 20px;
    height: 64px;
    background-color: transparent;
    transition: background-color 0.7s ease-in-out, box-shadow 0.7s ease-in-out;
    z-index: 10;
    
    &.whiteBackground {
      background-color: white;
      box-shadow: 1px 1px 1px gray;
    }
    @media (width < 769px) {
      column-gap: 10;
    }
    @media (width < 599px) {
      justify-content: start;
    }
  }
  .link {
    text-decoration: none;
    color: black;
    font-weight: 500;
    padding: 5px 10px;
    min-width: 70px;
    &:hover {
      transform: scale(105%);
    }
    &:active {
      font-weight: 900;
    }
    
    @media (width < 769px) {
      padding: 5px 10px;
      min-width: unset;
    }
    @media (width < 599px) {
      display: none;
    }
  }
  .mobile-link {
    text-decoration: none;
    color: black;
    font-weight: 500;
    padding: 5px 10px;
    min-width: 70px;
    &:hover {
      transform: scale(105%);
    }
    &:active {
      font-weight: 900;
    }
  }
  .language {
    text-transform: uppercase;
  }
  .icon {
    width: 24px;
    height: 24px;
  }
  .flag {
    width: 20px;
  }
  #burger-menu-button {
    width: 40px;
    height: 40px;
    display: none;
    border: unset;
    background-color: transparent;
    cursor: pointer;
    border-radius: 50%;
    margin-left: 20px;
    @media (width < 599px) {
      display: block;
    }
    &:hover {
      background-color: whitesmoke;
    }
    &:active {
      background-color: lightgray;

    }
  }
  #sidebar {
    display: none;
    width: 300px;
    height: calc(100vh - 64px);
    background-color: whitesmoke;
    position: sticky;
    left: 0px;
    top: 65px;
    z-index: 100;
    border-right: 1px solid gray;
    flex-direction: column;
    text-align: center;
    justify-content: start;
    gap: 30px;
    transition: display 0.5s ease-in-out;
    &.opened {
      display: flex;
    }
  }
</style>
<script>
  const init = () => {
    const $header = document.querySelector("#portfolio-header") as HTMLElement
    const $sectionElements = document.querySelectorAll("section[data-header-theme='transparent']")
    
    const intersectionOptions = {
      root: null,
      rootMargin: '-420px',
      treshold: 1
    }
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const whiteBackgroundOn = !entry.isIntersecting
        $header.classList.toggle('whiteBackground', whiteBackgroundOn)
      })
    }, intersectionOptions)
  
    $sectionElements.forEach((section) => observer.observe(section))

    const menu = document.querySelector("#burger-menu-button") as HTMLElement
    const sidebar = document.querySelector("#sidebar") as HTMLElement
    const links = document.querySelectorAll(".mobile-link")
  
    let isOpened = false;
    menu.addEventListener('click', (e) => {
      sidebar.classList.toggle('opened', !isOpened)
      isOpened = !isOpened
      e.stopPropagation();
    })
    menu.addEventListener('keydown', (e) => {
      if (e.code == 'Escape') {
        sidebar.classList.remove('opened')
        isOpened = false
      }
    })
    document.onclick = () => {
      sidebar.classList.remove('opened')
      isOpened = false
    }
    links.forEach((link) => {
      link.addEventListener('click', () => {
        sidebar.classList.remove('opened')
        isOpened = false
      })
    })
  }

  document.addEventListener('astro:page-load', () => {
    init()
  });

  
</script>