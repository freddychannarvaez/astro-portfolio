---
interface Props {
	routes: any[];
}

let { routes } = Astro.props;
---
<header class="header" id="portfolio-header">
  {
    routes.map((route) => (
      route.icon == '' ?
      <a href={route.link}>{route.title}</a>
      :
      <a href={route.link}>
        {route.title}
        <img src={route.icon}/>
      </a>
    ))
  }
</header>
<style>
  .header {
    position: sticky;
    top: 0px;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    column-gap: 20px;
    height: 64px;
    background-color: transparent;
    transition: background-color 0.7s ease-in-out, box-shadow 0.7s ease-in-out;
    z-index: 10;
    
    &.whiteBackground {
      background-color: white;
      box-shadow: 1px 1px 1px gray;
    }

    @media (width < 761px) {
      column-gap: 10;
    }
    @media (width < 399px) {
      justify-content: space-between;
    }
  }
  a {
    text-decoration: none;
    color: black;
    font-weight: 500;
    padding: 5px 10px;
    min-width: 70px;
    
    @media (width < 761px) {
      padding: 5px 10px;
      min-width: unset;
    }
  }
  a:hover {
    transform: scale(105%);
  }
  img {
    width: 20px;
  }
</style>
<script>
	const $header = document.querySelector("#portfolio-header") as HTMLElement
	const $sectionElements = document.querySelectorAll("section[data-header-theme='transparent']")

	const intersectionOptions = {
		root: null,
		rootMargin: window.innerWidth > 599 ? '-420px' : '-55%',
		treshold: 1
	}

	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const whiteBackgroundOn = !entry.isIntersecting
			$header.classList.toggle('whiteBackground', whiteBackgroundOn)
		})
	}, intersectionOptions)

	$sectionElements.forEach((section) => observer.observe(section))
</script>